<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyHOGS</title><link href="http://pyhogs.github.io/" rel="alternate"></link><link href="http://pyhogs.github.io/feeds/python-hour.atom.xml" rel="self"></link><id>http://pyhogs.github.io/</id><updated>2014-12-01T12:00:00+07:00</updated><entry><title>Python Hour - 1 December 2014</title><link href="http://pyhogs.github.io/python-hour-2014-12-01.html" rel="alternate"></link><updated>2014-12-01T12:00:00+07:00</updated><author><name>JP Rinehimer</name></author><id>tag:pyhogs.github.io,2014-12-01:python-hour-2014-12-01.html</id><summary type="html">&lt;h2&gt;Bilinear interpolation&lt;/h2&gt;
&lt;p&gt;Parker showed his results of bilinear interpolation to interpolate data from
one plaid grid to another. Here's the resulting code:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(from the comments to &lt;a href="python-hour-2014-11-24"&gt;last weeks meeting&lt;/a&gt;):&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c"&gt;# add velocity vectors&lt;/span&gt;
    &lt;span class="c"&gt;# get velocity&lt;/span&gt;
    &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;squeeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;squeeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;# set masked values to 0&lt;/span&gt;
    &lt;span class="n"&gt;ud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ud&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mask_u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;vd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;vd&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;mask_v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="c"&gt;# create interpolant&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scipy.interpolate&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;intp&lt;/span&gt;
    &lt;span class="n"&gt;ui&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interp2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lon_u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lat_u&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ud&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;vi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interp2d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lon_v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;lat_v&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;vd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# create regular grid&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
    &lt;span class="n"&gt;aa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;daax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;daay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;axrat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deg2rad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;daax&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;daay&lt;/span&gt;
    &lt;span class="n"&gt;nngrid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nngrid&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;axrat&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nngrid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# interpolate to regular grid&lt;/span&gt;
    &lt;span class="n"&gt;uu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ui&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;vv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uu&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="c"&gt;# plot velocity vectors&lt;/span&gt;
    &lt;span class="n"&gt;xt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zfun&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;labxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;lr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;scl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quiver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;uu&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;vv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;scl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scale_units&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running Python scripts from the command line&lt;/h2&gt;
&lt;p&gt;Parker described a workflow from a daily fore/now-casting model run. A series
of cron-jobs collects data from various sources, processes the data via legacy
Matlab scripts, runs the model, and uses Python to create some visualizations.
This lead to a discussion of running Python (and Matlab) from the command line.&lt;/p&gt;
&lt;p&gt;To run a Python script from the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;myscript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Runs&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;myscript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also make the script itself executable so that you don't need to
directly invoke the &lt;code&gt;python&lt;/code&gt; executable. To do so, the very first line of the
file needs to be a "she-bang (&lt;code&gt;#!&lt;/code&gt;) line":&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python  # Python 2&lt;/span&gt;
&lt;span class="n"&gt;OR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c"&gt;#!/usr/bin/env python3  # Python 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If this line starts your script, the shell knows to execute it through python.
You also have to make the file &lt;em&gt;executable&lt;/em&gt; using &lt;code&gt;chmod&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;myscript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can then run it like any other program just by typing it's name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myscript&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;./&lt;/code&gt; is needed if the script is not in a directory of your &lt;code&gt;$PATH&lt;/code&gt;
environment variable. If you move or copy your script to a location in your
&lt;code&gt;$PATH&lt;/code&gt; you can run it from anywhere on your system just by typing the file
name.&lt;/p&gt;
&lt;h2&gt;Command line arguments in Python&lt;/h2&gt;
&lt;p&gt;In the workflow described above, the scripts are written in 3 different
languages (shell, Matlab, and Python) and need a way to talk to each other.
While Matlab scripts can be run from the command line, they cannot take command
line arguments (although there are &lt;a href="http://www.mathworks.com/matlabcentral/answers/97204-how-can-i-pass-input-
parameters-when-running-matlab-in-batch-mode-in-windows"&gt;ways around this using the &lt;code&gt;/r&lt;/code&gt;
flag&lt;/a&gt;). Because of this,
Parker was sharing parameters, such as the date to start the model, between the
various scripts using temporary text files.&lt;/p&gt;
&lt;p&gt;While workable, this method is awkward and mostly unnecessary in Python because
Python can accept command-line arguments, like most executables in Linux-based
systems. While terminology varies, arguments can be split into two broad
categories (which loosely correspond to Python's positional and keyword
function arguments):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;positional arguments&lt;/strong&gt; where the argument order determines its function.
  Common examples include filenames in commands like &lt;code&gt;cp src dest&lt;/code&gt; where the
  first argument is the file to copy and the second is its destination.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;flags&lt;/strong&gt; which are specified following a single or double dash and can
  generally be in any order. Flags come in two varieties: &lt;em&gt;stand-alone&lt;/em&gt;, which
  do not require any additional arguments, and flags which must be followed by
  one (or more) arguments. Flags often have both short and long forms which are
  equivalent. The short form is usually specified by a single dash &lt;code&gt;-&lt;/code&gt; and a
  letter and the long form has two dashes &lt;code&gt;--&lt;/code&gt; and a word. Many programs allow
  short form flags to be strung together like &lt;code&gt;ls -lat&lt;/code&gt; which is equivalent to
  &lt;code&gt;ls -l -a -t&lt;/code&gt;. While their use depends on the program, common flags include
  things like &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--verbose&lt;/code&gt; for more information from programs, &lt;code&gt;-h&lt;/code&gt; or
  &lt;code&gt;--help&lt;/code&gt; for help, &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; for listing all occurrences, and &lt;code&gt;-r&lt;/code&gt; or
  &lt;code&gt;--recursive&lt;/code&gt; for recursive functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Depending on your needs, you can include command-line arguments in your scripts
through either &lt;a href="https://docs.python.org/2/library/sys.html"&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/a&gt; or
&lt;a href="https://docs.python.org/3/library/argparse.html"&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt;. Other modules
include
&lt;a href="https://docs.python.org/3.1/library/optparse.html?highlight=optpars
e#module-optparse"&gt;&lt;code&gt;optparse&lt;/code&gt;&lt;/a&gt; and
[&lt;code&gt;getopt'](https://docs.python.org/3.1/library/getopt.html) although these have
for the most part been superseded by the&lt;/code&gt;argparse` module. All are available
in the Python Standard library.&lt;/p&gt;
&lt;h3&gt;sys.argv&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;sys&lt;/code&gt; module provides simple, string-based argument parsing through the
&lt;code&gt;argv&lt;/code&gt; parameter. Command line arguments are passed to the function as
space-separated strings and are accessible through the list &lt;code&gt;sys.argv&lt;/code&gt;. The
first element in this list is always the script name. No parsing or type
conversion is performed. This method should be used for simple scripts where
interpretation of the arguments is straightforward.&lt;/p&gt;
&lt;p&gt;The example below is also in &lt;a href="https://github.com/PyHOGS/pyhogs.github.io/blob/pelican-source/pyhogs-code/example-scripts/sys_argv_example.py"&gt;our repository&lt;/a&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env/python&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="c"&gt;# Get the total number of arguments&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c"&gt;# Subtract 1 for the script name&lt;/span&gt;

&lt;span class="c"&gt;# Print it&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{:d} arguments passed to the script&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Argument #{:d}: {} &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For example, this returns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;sys_argv_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;
&lt;span class="n"&gt;Argument&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sys_argv_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;Argument&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;
&lt;span class="n"&gt;Argument&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;
&lt;span class="n"&gt;Argument&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="n"&gt;Argument&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;
&lt;span class="n"&gt;Argument&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;Argument&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;argparse&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://docs.python.org/3/library/argparse.html"&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; is a fully
featured module for command-line argument parsing. It can interpret both
positional arguments and flags, understand long- and short-form flags,
automatically generate help text, do type conversion, set default values, and
understand subcommands commonly used in programs like &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;svn&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;argparse&lt;/code&gt; is more complicated that &lt;code&gt;sys.argv&lt;/code&gt;, but it allows you to
incorporate full-featured argument parsing seen in most Linux programs using a
very minimal amount of code. Follow these steps to use the module:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a parser object from the &lt;a href="https://docs.python.org/2.7/library/argparse.html#argparse.ArgumentParser"&gt;&lt;code&gt;argparse.ArgumentParser&lt;/code&gt;&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;Add various arguments using the &lt;code&gt;ArgumentParser.add_argument&lt;/code&gt; method. &lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;ArgumentParser.parse_args()&lt;/code&gt; method to store the parsed arguments in a &lt;code&gt;argparse.Namespace&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;Access the arguments from the &lt;code&gt;Namespace&lt;/code&gt; object using the dot(&lt;code&gt;.&lt;/code&gt;)-notation.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An example program is below (and &lt;a href="https://github.com/PyHOGS/pyhogs.github.io/blob/pelican-source/pyhogs-code/example-scripts/argparse_example.py"&gt;in our repository&lt;/a&gt;), but check out the
&lt;a href="https://docs.python.org/2.7/library/argparse.html"&gt;documentation&lt;/a&gt; for all of
its features and more examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;This example script prints the mean and standard deviation &lt;/span&gt;
&lt;span class="sd"&gt;of a list of scores to demonstrate some of the features of argparse.&lt;/span&gt;

&lt;span class="sd"&gt;This should all be wrapped in a main function, but I just wanted to &lt;/span&gt;
&lt;span class="sd"&gt;keep things simple.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;

&lt;span class="c"&gt;# Define mean and standard deviation functions. We could use numpy,&lt;/span&gt;
&lt;span class="c"&gt;# but I only want to use Python 2 standard libraries...&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Return mean of list&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;std&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Return (unbiased) standard deviation of list&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xp2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xp2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Create the parser&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Determine mean and standard deviation of a list.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Add the arguments. Notice that by specifying the argument without or with&lt;/span&gt;
&lt;span class="c"&gt;# dashes determines whether it&amp;#39;s positional or not. Positional arguments&lt;/span&gt;
&lt;span class="c"&gt;# are added in the order they should be specified.&lt;/span&gt;

&lt;span class="c"&gt;# Positional argument with a list, by default it stores the result&lt;/span&gt;
&lt;span class="c"&gt;# to args.scorces, but you can specifiy the location &lt;/span&gt;
&lt;span class="c"&gt;# using the `dest` keyword&lt;/span&gt;
&lt;span class="n"&gt;default_scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;4.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;8.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;scores&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="c"&gt;# Store as floats &lt;/span&gt;
                    &lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Gets all following arguments and stores as list&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;default_scores&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Set default scores&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Scores to compute statistics for&amp;#39;&lt;/span&gt;  &lt;span class="c"&gt;# Help text&lt;/span&gt;
                    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Add a stand-alone, boolean argument, off-by-default&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--verbose&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Long form,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;quot;-v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# Short form&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Print more stuff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;store_true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Parse the arguments&lt;/span&gt;
&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;# We&amp;#39;re done with the specification and parsing. In a real script you could&lt;/span&gt;
&lt;span class="c"&gt;# define the parser in a function to seperate it from the main code.&lt;/span&gt;

&lt;span class="c"&gt;# Determine the statistics&lt;/span&gt;
&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The mean is: {:f}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;The standard deviation is: {:f}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{:f} {:f}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This script returns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;argparse_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="nl"&gt;usage:&lt;/span&gt; &lt;span class="n"&gt;Determine&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt; &lt;span class="n"&gt;deviation&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                                        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="p"&gt;...]]&lt;/span&gt;

&lt;span class="n"&gt;positional&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;scores&lt;/span&gt;         &lt;span class="n"&gt;Scores&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;compute&lt;/span&gt; &lt;span class="n"&gt;statistics&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;

&lt;span class="n"&gt;optional&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;     &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;  &lt;span class="n"&gt;Print&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;argparse_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="mf"&gt;6.000000&lt;/span&gt; &lt;span class="mf"&gt;2.943920&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;argparse_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;6.000000&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt; &lt;span class="n"&gt;deviation&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;2.943920&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;argparse_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mf"&gt;1.000000&lt;/span&gt; &lt;span class="mf"&gt;0.000000&lt;/span&gt;

&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;argparse_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.000000&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;standard&lt;/span&gt; &lt;span class="n"&gt;deviation&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;1.581139&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="2-D interpolation"></category><category term="command line"></category></entry><entry><title>Python Hour - 24 November 2014</title><link href="http://pyhogs.github.io/python-hour-2014-11-24.html" rel="alternate"></link><updated>2014-11-24T11:00:00+07:00</updated><author><name>Earle Wilson</name></author><id>tag:pyhogs.github.io,2014-11-24:python-hour-2014-11-24.html</id><summary type="html">&lt;h3&gt;Meeting Summary&lt;/h3&gt;
&lt;p&gt;Attendance: Parker M., Michelle W. and Earle W.&lt;/p&gt;
&lt;p&gt;For most of the meeting, the group discussed some strategies for introducing Python in the classroom. Parker motivated the discussion by sharing his plans for using Python in his Puget Sound oceanography course, which he will offer next quarter. The challenge he outlined is getting students to use Python to explore data and model output without letting that experience detract from the main objectives of the course.&lt;/p&gt;
&lt;p&gt;Michelle advised that a few hands-on instructional sessions will be necessary. Earle supported this idea and suggested borrowing some ideas from the &lt;a href="http://software-carpentry.org/"&gt;Software Carpentry&lt;/a&gt; teaching lab, in particular the strategy of introducing instructive yet interesting examples that students will find immediately useful. Everyone seemed to agree that teaching the fundamentals of the language, without providing interesting applications, will not be the best use of time and will likely disengage students. In other words, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World. We promise to come up with a better example.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Parker asked about how to interpolate from one 2-D plaid grid to another. Earle suggested using the &lt;a href="http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.interpolate.interp2d.html"&gt;scipy.interpolate.interp2d&lt;/a&gt; function.&lt;/p&gt;</summary><category term="teaching python"></category><category term="2-D interpolation"></category></entry><entry><title>Python Hour - 10 November 2014</title><link href="http://pyhogs.github.io/python-hour-2014-11-10.html" rel="alternate"></link><updated>2014-11-10T11:00:00+07:00</updated><author><name>Earle Wilson</name></author><id>tag:pyhogs.github.io,2014-11-10:python-hour-2014-11-10.html</id><summary type="html">&lt;h3&gt;Meeting Summary&lt;/h3&gt;
&lt;p&gt;Zoltan showed us how to make a visually pleasing bathymetric chart using customized colormaps and non-linear color mapping. For more details, check out his notebook &lt;a href="colormap-bathymetry"&gt;write up&lt;/a&gt;. &lt;/p&gt;</summary><category term="colormaps"></category><category term="contours"></category></entry><entry><title>Python Hour - 20 October 2014</title><link href="http://pyhogs.github.io/python-hour-2014-10-20.html" rel="alternate"></link><updated>2014-10-20T11:00:00+07:00</updated><author><name>J.Paul Rinehimer</name></author><id>tag:pyhogs.github.io,2014-10-20:python-hour-2014-10-20.html</id><summary type="html">&lt;h2&gt;Meeting Summary&lt;/h2&gt;
&lt;h3&gt;Color and colormaps in matplotlib&lt;/h3&gt;
&lt;p&gt;We informally discussed various aspects of color and colormaps in matplotlib. Some of the topics included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Color and colormap basics&lt;/li&gt;
&lt;li&gt;Generating custom diverging colors&lt;/li&gt;
&lt;li&gt;Centering colormaps and displaying the center-valued color&lt;/li&gt;
&lt;li&gt;Differences between &lt;code&gt;pcolormesh&lt;/code&gt; and &lt;code&gt;contourf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setting upper, lower limits, and bad colors&lt;/li&gt;
&lt;li&gt;Using a colormap to color lines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the meeting, I created a notebook expanding on many of the examples that were shown.  The notebook may be found in the &lt;a href="colormap-examples"&gt;How-to section&lt;/a&gt; and has been added to the &lt;a href="https://github.com/PyHOGS/pyhogs-code/blob/master/notebooks/examples/Colormap%20examples.ipynb"&gt;notebook repository&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h3&gt;The problem with jet&lt;/h3&gt;
&lt;p&gt;We also talked about the disadvantages of the jet colormap that is the default for matplotlib and Matlab (pre-2014b).  The main disadvantage of the jet colormap is that there are discontinuities in the luminosity (lightness) of the map. Because of these kinks in lightness and non-ordered colors, figures using the jet colormap often seem to have details that aren't in the data, for example, bands existing in smoothly-varying data around yellow. Worse yet, jet can also obscure details in green and cyan bands because the lightness doesn't change as rapidly in these regions. So jet both obscures features and generates false features. For examples of this, see some of the references below.&lt;/p&gt;
&lt;h3&gt;Basic colormap theory&lt;/h3&gt;
&lt;p&gt;What is needed instead is a &lt;em&gt;perceptual colormap&lt;/em&gt;, i.e. one in which equal steps in data are perceived as equal steps in the colorspace. Because humans perceive changes in lightness more readily than changes in hue, colormaps with monotonically and evenly increasing lightness are easier to interpret. jet does not fit this category.&lt;/p&gt;
&lt;p&gt;Colormaps can generally be split into 4 groups:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequential: Lightness increases/decreases monotonically, often from white through a single hue.  Good for showing magnitude and ordering of data. Generally converts to grayscale well.&lt;/li&gt;
&lt;li&gt;Diverging: Lightness has a maximum at some central or critical value, and reaches a minimum at either end. Good for showing anomalies about zero or some other critical value as well as direction. Usually &lt;em&gt;does not&lt;/em&gt; convert well to grayscale because the two ends often have similar luminosity.&lt;/li&gt;
&lt;li&gt;Qualitative: These colormaps represent categorical data that may not have an ordering and are often discrete. For these mappings, it is important that all the colors are distinguishable from all the others.&lt;/li&gt;
&lt;li&gt;Special / Miscellaneous: These are maps that may or may not fit the above categories and usually consist of maps designed for a particular use such as showing both land and water topography or displaying hot/cold regions. These colormaps try to connect with intuitive colors for the parameters and, while they may not be perfect perceptual maps, are useful for some purposes where nature suggests a colormap.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other important considerations when designing colormaps include awareness of colorblindness, conversion to grayscale, and how the colors look when used in different media such as online, print, and projection.&lt;/p&gt;
&lt;h2&gt;Colormap references&lt;/h2&gt;
&lt;p&gt;During the meeting, we compiled a number of useful colormap references, both from online and published literature:&lt;/p&gt;
&lt;h3&gt;matplotlib  references&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/users/colormaps.html"&gt;Choosing colormaps Guide&lt;/a&gt;: Good guide on choosing colormaps provided by the matplotlib team.  Has plots of the various default colormaps show how lightness changes throughout the maps&lt;/li&gt;
&lt;li&gt;&lt;a href="http://matplotlib.org/examples/color/colormaps_reference.html"&gt;Default colormaps&lt;/a&gt;: Quick reference for all of the default colormaps in matplotlib.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Webpages&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://colorbrewer2.org/"&gt;Colorbrewer&lt;/a&gt;: Good source for colormaps.  Shows example maps applying the colormap in different regions.  Also gives color-blind and printer-safe options.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://paletton.com"&gt;Palletton&lt;/a&gt; and &lt;a href="https://color.adobe.com/create/color-wheel/"&gt;Adobe Color CC&lt;/a&gt;: Online utilities for generating custom color schemes that follow established color paradigms.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/"&gt;How bad is your colormap?&lt;/a&gt;: Quick and recent overview of problems with the jet colormap along with some Python code (and a haiku!).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mycarta.wordpress.com/2012/05/29/the-rainbow-is-dead-long-live-the-rainbow-series-outline/"&gt;The Rainbow is Dead. Long live the Rainbow!&lt;/a&gt;: Long series examining the jet colormap, how to make it better, and looking at different colorspaces for interpolation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Publications&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ccom.unh.edu/sites/default/files/publications/Ware_1988_CGA_Color_sequences_univariate_maps.pdf"&gt;Ware, C (1998) Color Sequences for Univariate Maps: Theory, Experiments, and Principles &lt;em&gt;IEEE Computer Graphics and Applications,&lt;/em&gt; Sep 1998, 41-49.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nice article with a quick overview and theory of color perception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.mathworks.com/tagteam/81137_92238v00_RainbowColorMap_57312.pdf"&gt;Eddins, S (2014) Rainbow color map critiques: An overview and annotated bibliography. Mathworks Newsletter.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Great overview of colormaps and some color theory by a Matlab developer. Also includes a comprehensive annotated bibliography of more in-depth references. This was likely developed as a whitepaper to support the change in the Matlab default colormap (from jet to parula) in Release 2014b.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://onlinelibrary.wiley.com/doi/10.1029/2004EO400002/abstract"&gt;Light, P and J.Bartlein (2004), The end of the rainbow? Color schemes for improved data graphics, Eos, Transactions American Geophysical Union, 85 (40), 385-391, doi:10.1029/2004EO400002.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This paper focuses on colormaps in the geosciences and colorblindness. Matplotlib has a few similar default colormaps and a &lt;a href="http://www.mathworks.com/matlabcentral/fileexchange/17555-light-bartlein-color-maps"&gt;library for Matlab&lt;/a&gt; is available. Ironically, the first few pages of the online PDF are in black-and-white with color pages reproduced afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4118486&amp;amp;tag=1"&gt;Borland, D and RM Taylor (2007) Rainbow color map (still) considered harmful, IEEE Computer Graphics and Applications, 27 (2), 14-17, doi:10.1109/MCG.2007.323435.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Short review of the problems with rainbow colormaps and some statistics on how often it's used in medical imaging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.sandia.gov/~kmorel/documents/ColorMaps/"&gt;Moreland, K (2009) Diverging color maps for scientific visualization, Proceedings of the 5th International Symposium on Visual Computing, December 2009, doi:10.1007/978-3-642-10520-3_9.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A longish paper that goes into some color theory and discusses various colorspaces and the math involved in colors. Also included on the website are supplemental materials like Excel, R, Python, and Matlab tools to create custom colormaps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="colors"></category><category term="colormaps"></category><category term="jet"></category></entry><entry><title>Python Hour - 13 October 2014</title><link href="http://pyhogs.github.io/python-hour-2014-10-13.html" rel="alternate"></link><updated>2014-10-13T11:00:00+07:00</updated><author><name>J.Paul Rinehimer</name></author><id>tag:pyhogs.github.io,2014-10-13:python-hour-2014-10-13.html</id><summary type="html">&lt;p&gt;There was no meeting today as only Jim and JPaul showed up.&lt;/p&gt;
&lt;p&gt;In other news, if you need a new battery for a MacBook Pro, post mid-2009 model, the &lt;a href="http://www.themacstore.com/locations/seattle"&gt;U-District MacStore&lt;/a&gt; can do it in-house in around 15 - 25 minutes for a very reasonable price.  No need to send it off to Apple.  Just remember to call first to make sure they have the battery!&lt;/p&gt;</summary><category term="MacBook Pro"></category></entry><entry><title>Python Hour - 29 September 2014</title><link href="http://pyhogs.github.io/python-hour-2014-08-29.html" rel="alternate"></link><updated>2014-09-29T12:00:00+07:00</updated><author><name>Earle Wilson</name></author><id>tag:pyhogs.github.io,2014-09-29:python-hour-2014-08-29.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Parker brought our attention to a programming book called &lt;a href="http://mitpress.mit.edu/books/introduction-computation-and-programming-using-python"&gt;Introduction to Computation and Programming Using Python&lt;/a&gt;, by John Guttag. The book is based on a course offered on MIT's OpenCourseWare.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We spent the some time talking about what happens when you try to create a netcdf file that already exists. By default, when you open a netcdf dataset with &lt;code&gt;mode='w'&lt;/code&gt; (i.e., in writing mode) it should over-write any existing file. You can change this behavior with the "clobber" keyword option, which can raise an exception if the file already exists:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;netCDF4&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nc&lt;/span&gt;

&lt;span class="c"&gt;#create new netcdf file and over-write any pre-existing file with same name&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;filename.nc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#create new netcdf file but throw an error if the file already exists&lt;/span&gt;
&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dataset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;filename.nc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clobber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also learned that it is possible extract a subset of a netcdf file stored on a remote &lt;a href="http://www.unidata.ucar.edu/software/thredds/current/tds/TDS.html"&gt;THREDDS&lt;/a&gt; data server WITHOUT downloading the entire file. You simply supply the url path to the netcdf file and extract data as you would normally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jim spoke about some of the advantages and disadvantages of using a Python set. A Python &lt;a href="https://docs.python.org/2/library/stdtypes.html#set-types-set-frozenset"&gt;set&lt;/a&gt; is an unordered collection of unique objects. This is in contrast to a Python list, which is an ordered sequence of objects that may contain duplicates. One advantage of using a set over a list is that a set is substantially faster at determining if an object is in it. For example, performing &lt;code&gt;if x in set&lt;/code&gt; is generally faster than doing &lt;code&gt;if x in list&lt;/code&gt;. One disadvantage of using sets is that they have no intrinsic order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aoihf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; 
&lt;span class="c"&gt;#output: &lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will cause problems if you are iterating over a set and the order in which the set's items are accessed is important.&lt;/p&gt;</summary><category term="netcdf"></category><category term="sets"></category></entry><entry><title>Python Hour - 22 September 2014</title><link href="http://pyhogs.github.io/python-hour-2014-08-22.html" rel="alternate"></link><updated>2014-09-22T12:00:00+07:00</updated><author><name>Jesse Anderson</name></author><id>tag:pyhogs.github.io,2014-09-22:python-hour-2014-08-22.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;Earle gave a demo on objective mapping. He plans to clean up the code and share it with the group.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other things that came up while discussing objective mapping:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kriging and its similarities to optimal interpolation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nearest value assignment as opposed to interpolation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Raw strings. These are strings that are interpreted literally, so they don't require extra backslashes to escape special characters. They come in handy when plotting text labels with LaTeX symbols. To create a raw string, you simply add &lt;code&gt;r&lt;/code&gt; before the first quote. E.g. &lt;code&gt;units = r'Temperature ($^{\circ}$C)'&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;curve_fit&lt;/code&gt; function. &lt;code&gt;curve_fit&lt;/code&gt;, which is a function from the &lt;code&gt;scipy.optimize&lt;/code&gt; module. &lt;code&gt;curve_fit&lt;/code&gt; uses non-linear least squares to fit a function to data. You need to supply good first guesses to ensure that &lt;code&gt;curve_fit&lt;/code&gt; converges on reasonable solutions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;np.linalg.lstsq&lt;/code&gt; and &lt;code&gt;np.linalg.solve&lt;/code&gt;. These are a couple options for solving a system of equations in Python. This brought up the &lt;a href="http://www.netlib.org/lapack/#_presentation"&gt;LAPACK&lt;/a&gt; and BLAS software libraries. These are old FORTRAN codes, which form the basis of most linear algebra algorithms in use today. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Different ways to close figures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;all&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#h is figure handle or instance&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</summary><category term="optimal interpolation"></category><category term="strings"></category></entry><entry><title>Python Hour - 25 August 2014</title><link href="http://pyhogs.github.io/python-hour-2014-08-25.html" rel="alternate"></link><updated>2014-08-25T12:00:00+07:00</updated><author><name>Earle Wilson</name></author><id>tag:pyhogs.github.io,2014-08-25:python-hour-2014-08-25.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Parker introduced us to the &lt;a href="https://docs.python.org/2/library/itertools.html#itertools.permutations"&gt;itertools.permutations&lt;/a&gt; function. You can use this function to return all possible permutations of an iterable object, such as a list. For example, the code snippet below returns a list of all the permutations of &lt;code&gt;0,1,2&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;a_perm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a_perm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will print:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This apparently comes in handy when designing a python script to play tic-tac-toe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Parker also told us about the &lt;a href="http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.spatial.KDTree.html"&gt;&lt;code&gt;KDTree&lt;/code&gt; class&lt;/a&gt; from the &lt;code&gt;scipy.spatial&lt;/code&gt; module. KDTree provides efficient methods for finding the nearest-neighbors of a point (or a set of points) in a grid of spatial points. In particular, &lt;code&gt;KDTree.query&lt;/code&gt; is useful when trying to interpolate values on a grid where the spacings are uneven. An example of its usage is provided &lt;a href="http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.spatial.KDTree.query.html#scipy.spatial.KDTree.query"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We discussed a few ways to debug code in ipython. First, there is the magic command &lt;code&gt;%debug&lt;/code&gt;, which launches a post-mortem &lt;a href="http://ipython.org/ipython-doc/1/interactive/tutorial.html#debugging"&gt;debugging session&lt;/a&gt; after an exception is thrown. That is, if a script crashes, running &lt;code&gt;%debug&lt;/code&gt; activates the &lt;a href="https://docs.python.org/2/library/pdb.html"&gt;python debugger (pbd)&lt;/a&gt; and brings you to the line in the script where the error happened. The pdb gives you a special command line interface to explore the namespace of the code, execute commands and &lt;a href="https://docs.python.org/2/library/pdb.html#debugger-commands"&gt;set breakpoints&lt;/a&gt;. Another alternative is the &lt;a href="http://ipython.org/ipython-doc/dev/api/generated/IPython.core.debugger.html#classes"&gt;Tracer&lt;/a&gt; object from the &lt;code&gt;IPython.core.debugger&lt;/code&gt; module. The Tracer object can be used to activate a pdb session from anywhere in a script, which means you can use it as a breakpoint. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.core.debugger&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tracer&lt;/span&gt;
&lt;span class="n"&gt;debug_here&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tracer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;#later in code&lt;/span&gt;
&lt;span class="n"&gt;debug_here&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#code stops here and pdb is launched.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We briefly talked about keyword arguments and the different ways we can supply inputs to a function. Most of what we discussed is covered in &lt;a href="https://docs.python.org/2/tutorial/controlflow.html#keyword-arguments"&gt;Section 4.7&lt;/a&gt; on this python doc page. With keyword arguments, we can specify function arguments in any order, provided that the right keyword is used. Keyword arguments are particularly useful for setting &lt;a href="https://docs.python.org/2/tutorial/controlflow.html#default-argument-values"&gt;default argument values&lt;/a&gt;. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;#some good ways to call the function&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;violet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#using x and y as keywords&lt;/span&gt;
&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;crimson&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#order of keyword arguments does not matter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;</summary><category term="permutations"></category><category term="KDTree"></category><category term="debugging"></category><category term="functions"></category></entry><entry><title>Python Hour - 18 August 2014</title><link href="http://pyhogs.github.io/python-hour-2014-08-18.html" rel="alternate"></link><updated>2014-08-18T12:00:00+07:00</updated><author><name>Earle Wilson</name></author><id>tag:pyhogs.github.io,2014-08-18:python-hour-2014-08-18.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;We spent the first 15 minutes or so talking about &lt;code&gt;git&lt;/code&gt; and how it's different from other version control software, specifically Mercurial.&lt;/strong&gt;* After the meeting, I found this short &lt;a href="http://www.wikivs.com/wiki/Git_vs_Mercurial"&gt;wiki&lt;/a&gt; that does a nice comparison of the two. One of the main differences is that git uses a two-step commit process, whereas Mercurial uses a single step. Using git, you first have to add new changes to what is called an "index" or "staging area" before you can commit those changes to your local repository. So, in git, your workflow might be like:&lt;/p&gt;
&lt;p&gt;--&amp;gt;Make changes to file.&lt;/p&gt;
&lt;p&gt;--&amp;gt;Add changes (all at once or piecemeal) to staging area using &lt;a href="http://git-scm.com/docs/git-add"&gt;git add&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;--&amp;gt;Commit changes, stored in staging area, to local repository using &lt;a href="http://git-scm.com/docs/git-commit"&gt;git commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Having this staging area gives you more control over the commit process. JPaul showed us that you can use &lt;code&gt;git add&lt;/code&gt; to split new changes into what are known as "hunks" and commit those hunks individually - rather than all at once . This &lt;a href="http://alblue.bandlem.com/2011/10/git-tip-of-week-interactive-adding.html"&gt; blog article&lt;/a&gt; gives a nice example of how and why you would stage and commit hunks. Whether or not you find this feature useful will depend on your workflow. If you prefer to work for long stretches without committing and/or need to keep a detailed log the changes you're making to a file, you will probably find the &lt;code&gt;git add&lt;/code&gt; feature useful. Otherwise, you might find it to be unneccesary and somewhat annoying.&lt;/p&gt;
&lt;p&gt;* &lt;em&gt;In case you're wondering why we keep talking about git, it's because we have a &lt;a href="https://github.com/PyHOGS/pyhogs-code"&gt;github repository&lt;/a&gt; set up for the group. The hope is that we will one day use it to share and work on Python code among ourselves.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;We also talked about &lt;a href="http://www.sourcetreeapp.com/"&gt;SourceTree&lt;/a&gt;&lt;/strong&gt;, which is a neat graphical user interface for managing Git and Mercurial. SoureTree is probably a lot more user friendly than the command line. Parker and JPaul seem to like it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;JPaul showed us how to install the Gibbs SeaWater toolbox into Canopy.&lt;/strong&gt; In case you don't know, the &lt;a href="http://www.teos-10.org/pubs/gsw/html/gsw_contents.html"&gt;Gibbs SeaWater Oceanographic Toolbox&lt;/a&gt; is a library of routines for computing different thermodynamic properties of seawater, such as density, potential temperature and buoyancy frequency. The organization that maintains SeaWater also has similar libraries for computing ice and air properties. Canopy does not come with the Gibbs SeaWater Toolbox, but you can install it manually using &lt;a href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Pip&lt;/code&gt; is the official python package manager and it is automatically installed when you install Canopy. &lt;strong&gt;To install a python package that is not included in Canopy, you first open up a Canopy terminal then type &lt;code&gt;pip install name_of_package&lt;/code&gt; at the prompt.&lt;/strong&gt; You can open a Canopy terminal window by going to &lt;code&gt;Tools&lt;/code&gt; in the Canopy menubar. If Canopy is your default Python environment, you can do &lt;code&gt;pip install&lt;/code&gt; from a regular terminal window. &lt;code&gt;Pip&lt;/code&gt; then searches the &lt;a href="https://pypi.python.org/pypi/"&gt;PyPI&lt;/a&gt; database for the package and installs it into Canopy. PyPI is the official Python Package Index.&lt;/p&gt;
&lt;p&gt;So, to install the Gibbs SeaWater toolbox all you need to do is: &lt;code&gt;pip install gsw&lt;/code&gt; from the terminal command line. To use it in python, you need to import it via &lt;code&gt;import gsw&lt;/code&gt;. Similarly, you can get the older &lt;a href="https://pypi.python.org/pypi/seawater/"&gt;CSIRO seawater toobox&lt;/a&gt; by doing &lt;code&gt;pip install seawater&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parker introduced us to the &lt;code&gt;np.choose&lt;/code&gt; method.&lt;/strong&gt; &lt;code&gt;np.choose&lt;/code&gt; is another way of pulling values from an array. It's useful when trying to index a N-dimensional array; Parker used &lt;code&gt;np.choose&lt;/code&gt; in a routine that maps sigma coordinates to z-level coordinates. It's usage is somewhat complicated - perhaps unnecessarily so. (You can tell that the person who wrote the help documentation is pretty frustrated with everyone's confusion.) A related numpy method is &lt;code&gt;np.take&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;We briefly talked about some different ways to set up a figure.&lt;/strong&gt; Here are a few examples (use help for learn about more options):&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#makes a new figure and returns handle.&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;#same as above but fixes the fig. window to be 10&amp;#39;&amp;#39; by 8&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_axes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#creates axes in figure (named fig) and returns handle&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_axes&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;#same as above but now specifying the location and size.&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;111&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#makes a single subplot into current figure and returns axes handle.&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#another way of doing the above.&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#similar to the above but creates the first plot for a 2x2 subplot.&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="n"&gt;ax1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ax2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ax3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ax4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;#creates a new figure with a 2x2 subplot. returns handles for each.&lt;/span&gt;

&lt;span class="c"&gt;#For the simplest of plots, you can choose to do none of the above and just create the plot. For example, doing something like plt.plot(x,y) will create a figure and an axes by default. Also useful are the get current axes and figure methods:&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gca&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#gets handle for current axes&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gcf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c"&gt;#gets handle for current figure&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="github"></category><category term="Mercurial"></category><category term="SeaWater toolbox"></category><category term="figures"></category></entry><entry><title>Python Hour - 11 August 2014</title><link href="http://pyhogs.github.io/python-hour-2014-08-11.html" rel="alternate"></link><updated>2014-08-11T12:00:00+07:00</updated><author><name>Earle Wilson</name></author><id>tag:pyhogs.github.io,2014-08-11:python-hour-2014-08-11.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cim mentioned there is a Python toolbox called &lt;a href="https://pypi.python.org/pypi/xray/0.1.0"&gt;x-ray&lt;/a&gt; (short for eXtended arRAYs) that is designed to make working with multi-dimensional datasets a lot easier.&lt;/strong&gt; &lt;code&gt;xray&lt;/code&gt; allows you to add dimension names and coordinate values to numpy ndarrays. You can then use those dimension names and coordinate values to perform operations over the array. For example, with &lt;code&gt;xray&lt;/code&gt;, you can find the time mean of an array by doing something like &lt;code&gt;x.sum('time')&lt;/code&gt; - rather than &lt;code&gt;x.sum(axis=0)&lt;/code&gt;, if time was on the first dimension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jake asked about how to set the x-y aspect ratio of a plot.&lt;/strong&gt; We talked about many ways of doing this. The easiest solution is probably to use the &lt;code&gt;axes&lt;/code&gt; method &lt;code&gt;set_aspect&lt;/code&gt;. An minimal working example is provided &lt;a href="plot-aspect-ratio"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Earle talked about different ways of saving Python data to file.&lt;/strong&gt; Several options were mentioned; for e.g. (most) data can be saved as &lt;code&gt;.mat&lt;/code&gt;, &lt;code&gt;netcdf&lt;/code&gt; or &lt;code&gt;HDF&lt;/code&gt; files. However, the standard way of saving Python objects to file is to use the &lt;a href="https://docs.python.org/2/library/pickle.html#data-stream-format"&gt;pickle&lt;/a&gt; module. The syntax for saving objects using pickle is &lt;code&gt;pickle.dump(obj,file,protocol)&lt;/code&gt;. You can find examples of how to use pickle &lt;a href="http://earlew.github.io/Reading-and-writing-data/index.html#Reading-and-saving-data-using-Pickle"&gt;here&lt;/a&gt;. By default, &lt;code&gt;pickle.dump(...)&lt;/code&gt; tries to save data in a human-readable format. This is ok for small, simple objects but saving large n-dimensional arrays this way is very slow and results in files that take up a lot of disk space. The &lt;code&gt;protocol&lt;/code&gt; parameter allows users to change this behaviour. Setting &lt;code&gt;protocol = pickle.HIGHEST_PROTOCOL&lt;/code&gt; or &lt;code&gt;protocol = -1&lt;/code&gt;, tells pickle to use the fastest, most memory efficient option available. By using the highest protocol, you can save files that take up as much space as a &lt;code&gt;netcdf&lt;/code&gt; or &lt;code&gt;.mat&lt;/code&gt; file containing the same data. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Earle briefly showed how to make a plot with broken axes&lt;/strong&gt;. An example is given &lt;a href="broken-axes"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;We had a pretty lengthy discussion about version control software&lt;/strong&gt; - git, in particular. JPaul brought up the &lt;a href="http://git-scm.com/book/en/Git-Branching-Rebasing"&gt;git rebase&lt;/a&gt; command and showed how it can be useful when pushing changes to a group repository. We also tried to understand the difference between &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git reset&lt;/code&gt;. Cim mentioned that &lt;a href="https://bitbucket.org/"&gt;bitbucket&lt;/a&gt; is an alternative to github and offers free, online private repositories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jake says that PyHOG (PYthon Hour for Oceanographers and Geoscientists) sounds a lot better than GeoPUG (Geoscience Python User Group). So, PyHOG it is...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="x-ray"></category><category term="pickle"></category><category term="axes"></category><category term="git"></category></entry><entry><title>Python Hour - 04 August 2014</title><link href="http://pyhogs.github.io/python-hour-2014-08-04.html" rel="alternate"></link><updated>2014-08-04T12:00:00+07:00</updated><author><name>JP Rinehimer</name></author><id>tag:pyhogs.github.io,2014-08-04:python-hour-2014-08-04.html</id><summary type="html">&lt;p&gt;Today we went over loading a complex &lt;code&gt;.mat&lt;/code&gt; file into Python.  The notebook can
be found here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pyhogs.github.io/reading-mat-files.html"&gt;Reading a Complex .mat File in Python&lt;/a&gt;.&lt;/p&gt;
</summary><category term="mat files"></category><category term="loops"></category><category term="data processing"></category><category term="io"></category></entry><entry><title>Python Hour - 28 July</title><link href="http://pyhogs.github.io/python-hour-2014-07-28.html" rel="alternate"></link><updated>2014-07-28T14:52:31+07:00</updated><author><name>Earle Wilson</name></author><id>tag:pyhogs.github.io,2014-07-28:python-hour-2014-07-28.html</id><summary type="html">&lt;p&gt;We mainly talked about array indexing and slicing. Basically, we discussed the
different ways we can call a subset of an array. We were more or less following
&lt;a class="reference external" href="http://pyhogs.github.io/slicing-and-indexing.html"&gt;Jake's notebook&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Other things that we discussed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ipython.org/notebook.html"&gt;iPython Notebook&lt;/a&gt;: The Notebook is a way to log a Python session and export it
as document - see Jake's file. Text can be entered using plain text, markdown,
html or LaTex Math syntax. You can also export the Notebook in a bunch of
different formats including Latex and html. JPaul and I think it would be
good way to share notes with the group.&lt;/li&gt;
&lt;li&gt;Creating a &lt;a class="reference external" href="https://github.com/"&gt;Github&lt;/a&gt; repository for the group: Everyone seems to agree that it
would be convenient to have a centralized place where we can share and access
each other's code and notebooks. A github repository seems ideal. It's
contents would be accessible to everyone and each of us can contribute to
its content. I created a &lt;a class="reference external" href="https://github.com/earlew/Python_demo"&gt;personal repository for my notes.&lt;/a&gt;
Someone could create a separate repo for the group in a similar way.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="indexing and slicing"></category></entry><entry><title>Python Hour - 21 July</title><link href="http://pyhogs.github.io/python-hour-2014-07-21.html" rel="alternate"></link><updated>2014-07-21T14:52:31+07:00</updated><author><name>JP Rinehimer</name></author><id>tag:pyhogs.github.io,2014-07-21:python-hour-2014-07-21.html</id><summary type="html">&lt;p&gt;Today, we talked about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html"&gt;reshape&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html"&gt;Array broadcasting&lt;/a&gt; (Called &lt;a class="reference external" href="http://www.mathworks.com/help/matlab/ref/bsxfun.html"&gt;*binary scalar (or singleton) expansion*&lt;/a&gt; in MATLAB-speak)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html"&gt;Array Indexing&lt;/a&gt; (including &lt;code&gt;np.newaxis&lt;/code&gt;, vectors, arrays, views)&lt;/li&gt;
&lt;li&gt;Loading (and &lt;a class="reference external" href="https://docs.python.org/2/library/functions.html#reload"&gt;reloading&lt;/a&gt; ) modules&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="broadcasting"></category><category term="reshape"></category><category term="indexing"></category></entry></feed>